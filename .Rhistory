library(ggplot2)
library(readr)
titanicData <- read_csv("titanic.csv")
shinyUI(fluidPage(
# Application title
#titlePanel("Investigation of Mammal Sleep Data"),
uiOutput("title"),
# Sidebar with options for the data set
sidebarLayout(
sidebarPanel(
h3("Select the survivors class:"),
selectizeInput("class", "P Class", selected = "1", choices = levels(as.factor(titanicData$pclass))),
br(),
sliderInput("size", "Size of Points on Graph",
min = 1, max = 10, value = 5, step = 1),
checkboxInput("vline", h4("Add a vertical line the the plot", style = "color:blue;")),
conditionalPanel(condition = "input.vline",
numericInput("sleep",h4("Please choose an intercept between 1 and 80"),
value = 30, min = 1, max = 80, step = 1)
)),
# Show outputs
mainPanel(
tabsetPanel(
tabPanel("Text", textOutput("info")),
tabPanel("Plot", plotOutput("sleepPlot")),
tabPanel("Table", tableOutput("table"))
)
)
)
))
View(titanicData)
getwd()
library(shiny)
library(dplyr)
library(ggplot2)
shinyServer(function(input, output, session) {
getData <- reactive({
newTitanicData <- read_csv("titanic.csv") %>% filter(pclass == input$class) %>% group_by(age, sex) %>%
summarise(meanFare = round(mean(fare, na.rm = TRUE), 2))
})
#create plot
output$sleepPlot <- renderPlot({
#get filtered data
newData <- getData()
#create plot
#Creating plot and adding the condition of adding a line based on user input color coding by conservation if true and
#changing the opacity of the point in the graph based on REM sleep variable
g <- ggplot(newData, aes(x = age, y = meanFare))
#g + geom_point(size = input$size, aes(col = sex))
if(input$vline & input$sleep){
g + geom_point(size = 5, aes(col = sex)) +
geom_vline(xintercept = input$sleep, color="red",
linetype="dashed", size=1.5)
#	g + geom_point(size = input$size, aes(col = conservation, alpha = sleep_rem))
#} else if(input$conservation & !input$sleep) {
#  g + geom_point(size = input$size, aes(col = conservation))
}
else {
g + geom_point(size = input$size, aes(col = sex))
#	g + geom_point(size = input$size)
}
})
observe({ if(input$sleep) {
updateSliderInput(session, "size", min = 3)
}  else {
updateSliderInput(session, "size", min = 1)
}})
# changing the title dynamically based on the p class
output$title <- renderUI({ if(input$class == "1") {
titlePanel("Titanic Class 1")
} else if(input$class == "2") {
titlePanel("Titanic Class 2")
} else {
titlePanel("Titanic Class 3")
}
})
#create text info
output$info <- renderText({
#get filtered data
newData <- getData()
paste("Next two tabs include a Summary table and a plot for average fare for class", input$class, "grouped by age and sex", sep = " ")
})
#create output of observations
output$table <- renderTable({
getData()
})
})
library(ggplot2)
library(readr)
titanicData <- read_csv("titanic.csv")
shinyUI(fluidPage(
# Application title
#titlePanel("Investigation of Mammal Sleep Data"),
uiOutput("title"),
# Sidebar with options for the data set
sidebarLayout(
sidebarPanel(
h3("Select the survivors class:"),
selectizeInput("class", "P Class", selected = "1", choices = levels(as.factor(titanicData$pclass))),
br(),
sliderInput("size", "Size of Points on Graph",
min = 1, max = 10, value = 5, step = 1),
checkboxInput("vline", h4("Add a vertical line the the plot", style = "color:blue;")),
conditionalPanel(condition = "input.vline",
numericInput("sleep",h4("Please choose an intercept between 1 and 80"),
value = 30, min = 1, max = 80, step = 1)
)),
# Show outputs
mainPanel(
tabsetPanel(
tabPanel("Text", textOutput("info")),
tabPanel("Plot", plotOutput("sleepPlot")),
tabPanel("Table", tableOutput("table"))
)
)
)
))
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shinyUI(fluidPage(
img(src="The-Titanic-006.jpg", align = "right"),
# Application title
uiOutput("title"),
# Sidebar with options for the data set
sidebarLayout(
sidebarPanel(
h3("Select the survivors class:"),
selectizeInput("class", "P Class", selected = "1", choices = levels(as.factor(titanicData$pclass))),
br(),
sliderInput("size", "Size of Points on Graph",
min = 1, max = 10, value = 5, step = 1),
checkboxInput("vline", h4("Add a vertical line the the plot", style = "color:blue;")),
conditionalPanel(condition = "input.vline",
numericInput("int",h4("Please choose an intercept between 1 and 80"),
value = 30, min = 1, max = 80, step = 1)
)),
actionButton("goButton", "Download Data"),
# Show outputs
mainPanel(
tabsetPanel(
tabPanel("About", textOutput("info")),
tabPanel("Plot 1", plotOutput("vlinePlot")),
tabPanel("Plot 2", plotOutput("regPlot")),
tabPanel("Table", tableOutput("table"))
)
)
)
))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp()
runApp('C:/Adil/2018/Education/NCSU/Week 14')
View(titanicData)
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
poissonPreds
# Fitting POssion MOdel
titanicPoissonFit <- glm(survived ~ age*sex, data = newData, family = "poisson")
poissonPreds <- predict(titanicPoissonFit, newdata = data.frame(age = 29, sex = "female"))
poissonPreds
poissonPreds <- predict(titanicPoissonFit, newdata = data.frame(age = 29, sex = "female"),
type = "response", se.fit = TRUE)
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
titanicData <- read_csv("c:/Adil/2018/Education/NCSU/Week 10/titanic.csv")
#newDataTest <- titanicDatatest %>% group_by(round(age, 0), sex) %>%
#summarise(meanFare = round(mean(fare, na.rm = TRUE), 2))
#Generalized Model
titanicPoissonFit <- glm(survived ~ age*sex, data = titanicData, family = "poisson")
poissonPreds <- predict(titanicPoissonFit, newdata = data.frame(age = 30, sex = "male"),
type = "response", se.fit = TRUE)
poissonPreds
runApp('C:/Adil/2018/Education/NCSU/Week 14')
poissonPreds
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
help("numericInput")
runApp('C:/Adil/2018/Education/NCSU/Week 14')
runApp('C:/Adil/2018/Education/NCSU/Week 14')
